<?php

namespace Magenest\AbandonedCart\Model\Mail;

class TransportBuilder extends \Magento\Framework\Mail\Template\TransportBuilder
{
    protected $body;

    protected $subject;

    protected $from;

    public function getMessage()
    {
        return $this->message;
    }

    public function prepare()
    {
        return $this->prepareMessage();
    }

    /**
     * @return $this
     */
    public function clearFrom()
    {
        //$this->_from = null;
        $this->message->clearFrom('From');
        return $this;
    }

    public function clearSubject()
    {
        $this->message->clearSubject();
        return $this;
    }

    public function clearMessageId()
    {
        $this->message->clearMessageId();
        return $this;
    }

    public function clearBody()
    {
        $this->message->setParts([]);
        return $this;
    }

    public function clearRecipients()
    {
        $this->message->clearRecipients();
        return $this;
    }

    /**
     * @param $headerName
     *
     * @return $this
     */
    public function clearHeader($headerName)
    {
        if (isset($this->_headers[$headerName])){
            unset($this->_headers[$headerName]);
        }
        return $this;
    }
    public function setMessageContent($body, $subject, $from)
    {
        $this->body    = $body;
        $this->subject = $subject;
        $this->from    = $from;
    }

    /**
     * @return $this|\Magento\Framework\Mail\Template\TransportBuilder
     * @throws \Magento\Framework\Exception\MailException
     * @throws \Zend_Mail_Exception
     */
    protected function prepareMessage()
    {

        if ($this->from) {
            $from = $this->_senderResolver->resolve(
                $this->from
            );
            $this->message->setMessageType('text/html')->setBody($this->body)->setSubject($this->subject, ENT_QUOTES)->setFrom($from['email'], $from['name']);
        }else{
            $this->message->setMessageType('text/html')->setBody($this->body)->setSubject($this->subject, ENT_QUOTES);
        }
        return $this;
    }

    public function createAttachment($params, $transport = false)
    {
        $type = isset($params['cat']) ? $params['cat'] : \Zend_Mime::TYPE_OCTETSTREAM;
        if ($transport === false) {
            if ($type == 'pdf') {
                $this->message->createAttachment(
                    $params['body'],
                    'application/pdf',
                    \Zend_Mime::DISPOSITION_ATTACHMENT,
                    \Zend_Mime::ENCODING_BASE64,
                    $params['name']
                );
            } elseif ($type == 'png') {
                $this->message->createAttachment(
                    $params['body'],
                    'image/png',
                    \Zend_Mime::DISPOSITION_ATTACHMENT,
                    \Zend_Mime::ENCODING_BASE64,
                    $params['name']
                );
            } else {
                $encoding = isset($params['encoding']) ? $params['encoding'] : \Zend_Mime::ENCODING_BASE64;
                $this->message->createAttachment(
                    $params['body'],
                    $type,
                    \Zend_Mime::DISPOSITION_ATTACHMENT,
                    $encoding,
                    $params['name']
                );
            }
        } else {
            $this->addAttachment($params, $transport);
        }
        return $this;
    }

    public function addAttachment($params, $transport)
    {
        $zendPart = $this->createZendMimePart($params);
        $parts    = $transport->getMessage()->getBody()->addPart($zendPart);
        $transport->getMessage()->setBody($parts);
    }

    protected function createZendMimePart($params)
    {
        if (class_exists('Zend\Mime\Mime') && class_exists('Zend\Mime\Part')) {
            $type              = isset($params['type']) ? $params['type'] : \Zend\Mime\Mime::TYPE_OCTETSTREAM;
            $part              = new \Zend\Mime\Part(@$params['body']);
            $part->type        = $type;
            $part->filename    = @$params['name'];
            $part->disposition = \Zend\Mime\Mime::DISPOSITION_ATTACHMENT;
            $part->encoding    = \Zend\Mime\Mime::ENCODING_BASE64;
            return $part;
        } else {
            throw new \Exception("Missing Zend Framework Source");
        }
    }

    public function reset()
    {
        return parent::reset(); // TODO: Change the autogenerated stub
    }

}